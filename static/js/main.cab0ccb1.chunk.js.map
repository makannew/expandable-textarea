{"version":3,"sources":["components/nav/nav.module.css","components/mockup-server/mockup-server.module.css","components/nav/nav.js","../../src/format-functions/mask-formating.js","../../src/index.js","components/expand-shrink/expand-shrink.js","components/input-like-field/input-like-field.js","components/credit-card-format/credit-card-format.js","components/phone-format/phone-format.js","components/password-format/password-format.js","../../src/format-functions/password-formating.js","components/mockup-server/mockup-server.js","App.js","index.js"],"names":["module","exports","Nav","className","styles","to","maskFormating","para","maskString","replaceChar","validChar","preVisibleMask","rightToLeft","changeData","maskStr","valid","unformated","newValue","Array","newSelectionStart","alreadyValid","i","len","pressedKey","unformatedValue","totalReplace","unformatedPos","Math","formated","valIndex","cursorPos","firstReplaceHappened","thisChar","mustReplace","valChar","restValue","moveCursor","newSelectionEnd","forwardRef","initialValue","resizeDebouncingDelay","fitInField","rest","textAreaRef","useRef","cloneRef","pRef","undefined","lineHeight","useState","value","lineCount","minRows","useDelayedFunction","cloningStyles","name","iniLineCount","getLineCount","getCursorState","cursorStart","cursorEnd","scrollTop","newScrollLeft","scrollLeft","increasing","iniValue","newLineCount","excessIsShrinking","totalLines","formatFunction","setState","getComputedStyle","style","parseInt","elem","iniScrollLeft","e","key","useEffect","styleObserver","MutationObserver","attributes","attributeFilter","cloneStyles","window","forwardedRef","handleKeyDown","prepareChangeData","state","applyFormat","onClick","beforeElement","rows","maxRows","validRows","submitValue","differFromInitial","ref","position","paddingTop","paddingBottom","border","resize","visibility","disabled","cols","wrap","afterElement","ExpandShrink","serverState","updateServer","placeholder","language","thisStyle","showLineNumbers","href","InputLikeField","CreditCardFormat","creditCardFormat","PhoneFormat","phoneFormat","PasswordFormat","passwordFormat","allowedCharsRegEx","makingChar","iniSelectionEnd","newUnformatedValue","changes","deleteVal","backspaceVal","notSelected","iniSelectionStart","passwordFormating","SyntaxHighlighter","registerLanguage","jsx","MockupServer","hRef","current","innerHTML","addStyleNow","changeStyleLater","removeStyleLater","then","App","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cab0ccb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__3AJrQ\",\"router-link\":\"nav_router-link__1UheK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mockup-server\":\"mockup-server_mockup-server__2UAgk\",\"updating\":\"mockup-server_updating__DUwPm\",\"just-updated\":\"mockup-server_just-updated__1X6Mn\"};","import React from 'react'\nimport styles from './nav.module.css'\nimport { Link } from 'react-router-dom'\n\nexport default function Nav() {\n  return (\n    <div className={styles['nav']}>\n      <h3>Expandable-textarea Examples</h3>\n\n      <div>\n        <Link className={styles['router-link']} to='/expand-shrink'>\n          Expand-shrink\n        </Link>\n        <Link className={styles['router-link']} to='/input-like-field'>\n          Input-like-field\n        </Link>\n        <Link className={styles['router-link']} to='/focus-by-icon'>\n          Focus-by-icon\n        </Link>\n        <Link className={styles['router-link']} to='/credit-card-format'>\n          Credit-card-format\n        </Link>\n        <Link className={styles['router-link']} to='/password-format'>\n          Password-format\n        </Link>\n        <Link className={styles['router-link']} to='/phone-format'>\n          Phone-format\n        </Link>\n        <Link className={styles['router-link']} to='/custom-format'>\n          Custom-format\n        </Link>\n      </div>\n    </div>\n  )\n}\n","export function maskFormating(para = {}) {\n  const {\n    maskString = '!!!!-!!!!-!!!!-!!!!',\n    replaceChar = '!',\n    validChar = /\\d/g,\n    preVisibleMask = true,\n    rightToLeft = false\n  } = para\n\n  return (changeData) => {\n    let maskStr = maskString\n    let { pressedKey, newSelectionStart, newValue, valid } = changeData\n    if (!valid) return { ...changeData }\n    let unformated = (newValue.match(validChar) || ['']).join('')\n    if (rightToLeft) {\n      maskStr = Array.from(maskStr).reverse().join('')\n      newValue = Array.from(newValue).reverse().join('')\n      newSelectionStart = newValue.length - newSelectionStart\n      newSelectionStart = newSelectionStart < 0 ? 0 : newSelectionStart\n    }\n\n    let alreadyValid = true\n    for (let i = 0, len = newValue.length; i < len; ++i) {\n      if (i > maskStr.length) {\n        alreadyValid = false\n        break\n      }\n      if (maskStr[i] === replaceChar && !newValue[i].match(validChar)) {\n        alreadyValid = false\n        break\n      }\n      if (maskStr[i] !== replaceChar && newValue[i] !== maskStr[i]) {\n        alreadyValid = false\n        break\n      }\n    }\n    if (alreadyValid && pressedKey !== 'Delete' && pressedKey !== 'Backspace') {\n      return { ...changeData, unformatedValue: unformated }\n    }\n    if (rightToLeft) {\n      unformated = (newValue.match(validChar) || ['']).join('')\n    }\n    const totalReplace = maskStr.split(replaceChar).length - 1\n\n    const unformatedPos = Math.min(\n      (newValue.slice(0, newSelectionStart).match(validChar) || []).length,\n      totalReplace\n    )\n    let formated = ''\n    let valIndex = 0\n    let cursorPos = 0\n    let firstReplaceHappened = false\n    for (let i = 0, len = maskStr.length; i < len; ++i) {\n      let thisChar = maskStr[i]\n      let mustReplace = thisChar === replaceChar\n      let valChar = valIndex < unformated.length ? unformated[valIndex] : ''\n      if (mustReplace) {\n        firstReplaceHappened = true\n      }\n      if (valIndex < unformatedPos || !firstReplaceHappened) {\n        ++cursorPos\n      }\n      if (mustReplace) {\n        formated += valChar\n        ++valIndex\n      } else {\n        if (valChar) {\n          formated += thisChar\n        }\n      }\n\n      if (!valChar && preVisibleMask) {\n        if (mustReplace) {\n          formated += ' '\n        } else {\n          formated += thisChar\n        }\n      }\n\n      if (!valChar && !preVisibleMask) {\n        break\n      }\n    }\n\n    if (\n      formated[cursorPos] &&\n      !formated[cursorPos].match(validChar) &&\n      pressedKey === 'Delete'\n    ) {\n      let restValue = formated.substring(cursorPos)\n      if (restValue.match(validChar)) {\n        let moveCursor = maskStr.substring(cursorPos).indexOf(replaceChar)\n        cursorPos += moveCursor >= 0 ? moveCursor : 0\n      }\n    }\n\n    if (rightToLeft) {\n      formated = Array.from(formated).reverse().join('')\n      unformated = Array.from(unformated).reverse().join('')\n      cursorPos = formated.length - cursorPos\n      cursorPos = cursorPos < 0 ? 0 : cursorPos\n    }\n\n    return {\n      ...changeData,\n      unformatedValue: unformated,\n      newValue: formated,\n      newSelectionStart: cursorPos,\n      newSelectionEnd: cursorPos\n    }\n  }\n}\n","import React, { useState, useEffect, useRef, forwardRef } from 'react'\nimport useDelayedFunction from 'use-delayed-function'\nexport * from './format-functions/password-formating'\nexport * from './format-functions/mask-formating'\n\nconst ExpandableTextarea = forwardRef(function (\n  {\n    beforeElement,\n    afterElement,\n    className,\n    submitValue, // ({name:newValue}, hasChanged) , name:\"inputName\"\n    initialValue = '',\n    totalLines, // if not defined textarea lines not limited\n    minRows, // min row\n    maxRows, // max row\n    rows, // if set will be fixed rows\n    formatFunction,\n    resizeDebouncingDelay = 300,\n    fitInField = false,\n    ...rest // additional standard textarea attributes like: disabled, wrap,...\n  },\n  forwardedRef\n) {\n  const textAreaRef = useRef()\n  const cloneRef = useRef()\n  const pRef = useRef()\n  const changeData = useRef({ unformatedValue: undefined })\n  const lineHeight = useRef()\n  const [state, setState] = useState({\n    value: '',\n    lineCount: minRows || 1\n  })\n  const [cloneStylesLater] = useDelayedFunction(\n    cloneStyles,\n    resizeDebouncingDelay\n  )\n  const cloningStyles = [\n    'width',\n    'border',\n    'fontFamily',\n    'fontSize',\n    'fontWeight',\n    'fontVariant',\n    'fontStretch',\n    'boxSizing',\n    'paddingLeft',\n    'paddingRight'\n  ]\n\n  const { name } = rest\n  if (!submitValue) {\n    rest.disabled = true\n  }\n\n  if (!rest.wrap) {\n    rest.wrap = totalLines == 1 ? 'off' : 'on'\n  }\n\n  useEffect(() => {\n    const styleObserver = new MutationObserver(cloneStyles)\n    styleObserver.observe(textAreaRef.current, {\n      attributes: true,\n      attributeFilter: ['style']\n    })\n    cloneStyles()\n    return () => {\n      styleObserver.disconnect()\n    }\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('resize', cloneStylesLater)\n    return () => {\n      window.removeEventListener('resize', cloneStylesLater)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (changeData.current) {\n      const elem = textAreaRef.current\n      const {\n        newSelectionStart,\n        newSelectionEnd,\n        newScrollTop,\n        newScrollLeft,\n        iniSelectionStart,\n        iniSelectionEnd,\n        iniScrollTop,\n        iniScrollLeft\n      } = changeData.current\n      if (changeData.current.valid) {\n        elem.selectionStart = newSelectionStart\n        elem.selectionEnd = newSelectionEnd\n        elem.scrollTop = newScrollTop\n        elem.scrollLeft = newScrollLeft\n      } else {\n        elem.selectionStart = iniSelectionStart\n        elem.selectionEnd = iniSelectionEnd\n        elem.scrollTop = iniScrollTop\n        elem.scrollLeft = iniScrollLeft\n      }\n    }\n  }, [state])\n\n  useEffect(() => {\n    if (forwardedRef) {\n      forwardedRef.current = textAreaRef.current\n    }\n  }, [])\n\n  useEffect(() => {\n    handleKeyDown({ key: '' })\n    prepareChangeData(state.value, initialValue)\n    changeData.current.valid = true\n    changeData.current.unformatedValue = undefined\n    applyFormat()\n  }, [initialValue])\n\n  function handleChange(e) {\n    prepareChangeData(state.value, e.target.value)\n    const { newLineCount, excessIsShrinking } = changeData.current\n    if (totalLines && newLineCount > totalLines && !excessIsShrinking) {\n      changeData.current.valid = false\n    } else {\n      changeData.current.valid = true\n    }\n    applyFormat()\n  }\n\n  function prepareChangeData(iniValue, newValue) {\n    const iniLineCount = getLineCount(iniValue)\n    const {\n      cursorStart: newSelectionStart,\n      cursorEnd: newSelectionEnd,\n      scrollTop: newScrollTop,\n      scrollLeft: newScrollLeft\n    } = getCursorState(textAreaRef.current)\n    const increasing = newValue.length > iniValue.length\n    const newLineCount = getLineCount(newValue)\n    const excessIsShrinking =\n      totalLines && iniLineCount > totalLines && !increasing\n    changeData.current = {\n      ...changeData.current,\n      iniValue,\n      iniLineCount,\n      newValue,\n      newLineCount,\n      excessIsShrinking,\n      increasing,\n      newSelectionStart,\n      newSelectionEnd,\n      newScrollTop,\n      newScrollLeft\n    }\n  }\n\n  function applyFormat() {\n    if (formatFunction) {\n      changeData.current = formatFunction(changeData.current)\n    }\n    const {\n      valid,\n      iniValue,\n      newValue,\n      iniLineCount,\n      newLineCount\n    } = changeData.current\n    if (valid) {\n      setState({ value: newValue, lineCount: newLineCount })\n    } else {\n      setState({ value: iniValue, lineCount: iniLineCount })\n    }\n  }\n\n  function getLineHeight() {\n    lineHeight.current = parseInt(getComputedStyle(pRef.current).height, 10)\n  }\n\n  function getLineCount(value) {\n    cloneRef.current.value = value\n    return Math.floor(cloneRef.current.scrollHeight / lineHeight.current)\n  }\n\n  function submitChange() {\n    if (typeof name === 'string') {\n      const { unformatedValue } = changeData.current\n      submitValue({\n        [name]: unformatedValue || state.value,\n        differFromInitial: initialValue !== (unformatedValue || state.value),\n        name,\n        unformatedValue: unformatedValue,\n        value: state.value\n      })\n    }\n  }\n\n  function cloneStyles() {\n    for (let style of cloningStyles) {\n      cloneRef.current.style[style] = getComputedStyle(textAreaRef.current)[\n        style\n      ]\n      if (style !== 'border') {\n        pRef.current.style[style] = getComputedStyle(textAreaRef.current)[style]\n      }\n    }\n    getLineHeight()\n    cloneRef.current.style['height'] = `${lineHeight.current}px`\n  }\n\n  function getCursorState(elem) {\n    return {\n      cursorStart: elem.selectionStart,\n      cursorEnd: elem.selectionEnd,\n\n      scrollTop: elem.scrollTop,\n      scrollLeft: elem.scrollLeft\n    }\n  }\n\n  function handleKeyDown(e) {\n    const {\n      cursorStart: iniSelectionStart,\n      cursorEnd: iniSelectionEnd,\n      scrollTop: iniScrollTop,\n      scrollLeft: iniScrollLeft\n    } = getCursorState(textAreaRef.current)\n    changeData.current = {\n      ...changeData.current,\n      iniSelectionStart,\n      iniSelectionEnd,\n      iniScrollTop,\n      iniScrollLeft,\n      pressedKey: e.key\n    }\n  }\n\n  function focusOnText(e) {\n    if (e.target !== textAreaRef.current) {\n      textAreaRef.current.focus()\n    }\n  }\n\n  function validRows() {\n    if (rows) return rows\n    const { lineCount } = state\n    if (maxRows && lineCount > maxRows) return maxRows\n    if (minRows && lineCount < minRows) return minRows\n    return lineCount\n  }\n\n  return (\n    <div onClick={focusOnText}>\n      {beforeElement ? beforeElement : null}\n      <textarea\n        ref={textAreaRef}\n        className={className}\n        {...rest}\n        rows={validRows()}\n        value={state.value}\n        onChange={handleChange}\n        onBlur={submitChange}\n        onKeyDown={handleKeyDown}\n      />\n      <textarea\n        ref={cloneRef}\n        style={{\n          position: 'absolute',\n          paddingTop: '0px',\n          paddingBottom: '0px',\n          border: '0px solid #000000',\n          resize: 'none',\n          visibility: 'hidden'\n        }}\n        disabled={true}\n        rows={1}\n        cols={rest.cols}\n        wrap={totalLines == 1 ? (fitInField == true ? 'on' : 'off') : rest.wrap}\n      ></textarea>\n      <p\n        ref={pRef}\n        style={{\n          position: 'absolute',\n          paddingTop: '0px',\n          paddingBottom: '0px',\n          border: '0px solid #000000',\n          visibility: 'hidden'\n        }}\n      >\n        1\n      </p>\n      {afterElement ? afterElement : null}\n    </div>\n  )\n})\n\nexport default ExpandableTextarea\n","import React, { useState } from 'react'\nimport ExpandableTextarea from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function ExpandShrink({ serverState, updateServer }) {\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'expandShrink':\n        updateServer(value)\n      default:\n        return\n    }\n  }\n  return (\n    <div className='container'>\n      <h4>Expand-shrink example</h4>\n      <ExpandableTextarea\n        placeholder='Type here'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        totalLines={5}\n        name='expandShrink'\n        minRows={1}\n        maxRows={5}\n      />\n      <h4>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\n  const [state, setState] = useState('')\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'expandShrink':\n        setState(value)\n      default:\n        return\n    }\n  }\n  return (\n    <div className='container'>\n      <h4>Expand-shrink example</h4>\n      <ExpandableTextarea\n        placeholder='Type here'\n        initialValue={state}\n        submitValue={handleSubmit}\n        totalLines={5}\n        name='expandShrink'\n        minRows={1}\n        maxRows={5}\n      />\n    </div>\n  )\n      `}\n      </SyntaxHighlighter>\n      <div className='links'>\n        <a href='https://github.com/makannew/expandable-textarea'>Github</a>\n        <a href='https://www.npmjs.com/package/expandable-textarea'>\n          npm package\n        </a>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport ExpandableTextarea from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function InputLikeField() {\n  const [state, setState] = useState('')\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'inputLikeField':\n        setState(value)\n      default:\n        return\n    }\n  }\n  return (\n    <div className='container'>\n      <h4>Input-like-field example</h4>\n      <ExpandableTextarea\n        className={'fixed-height'}\n        placeholder='Type here'\n        initialValue={state}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        name='inputLikeField'\n      />\n      <h4>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\n<ExpandableTextarea\n  placeholder='Type here'\n  initialValue={state}\n  submitValue={handleSubmit}\n  rows={1}\n  totalLines={1}\n  name='inputLikeField'\n/>\n      `}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function CreditCardFormat() {\n  const [state, setState] = useState('')\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'creditCardFormat':\n        setState(value)\n      default:\n        return\n    }\n  }\n  const creditCardFormat = maskFormating({\n    maskString: '!!!!-!!!!-!!!!-!!!!',\n    replaceChar: '!',\n    validChar: /\\d/g,\n    preVisibleMask: true,\n    rightToLeft: false\n  })\n\n  return (\n    <div className='container'>\n      <h4>Credit card format example</h4>\n      <ExpandableTextarea\n        className={'fixed-height'}\n        placeholder='Credit card number'\n        initialValue={state}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={creditCardFormat}\n        name='creditCardFormat'\n      />\n\n      <h4>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useState } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\n\nexport default function CreditCardFormat() {\n  const [state, setState] = useState('')\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'creditCardFormat':\n        setState(value)\n      default:\n        return\n    }\n  }\n  const creditCardFormat = maskFormating({\n    maskString: '!!!!-!!!!-!!!!-!!!!',\n    replaceChar: '!',\n    validChar: /\\d/g,\n    preVisibleMask: true,\n    rightToLeft: false\n  })\n\n  return (\n    <div className='container'>\n      <h4>Credit card format example</h4>\n      <ExpandableTextarea\n        placeholder='Type here'\n        initialValue={state}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={creditCardFormat}\n        name='creditCardFormat'\n      />\n\n    </div>\n  )\n}\n`}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function PhoneFormat() {\n  const [state, setState] = useState('')\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'phoneFormat':\n        setState(value)\n      default:\n        return\n    }\n  }\n\n  const phoneFormat = maskFormating({\n    maskString: '(!!) !!!! !!!!',\n    replaceChar: '!',\n    validChar: /\\d/g,\n    preVisibleMask: false,\n    rightToLeft: false\n  })\n\n  return (\n    <div className='container'>\n      <h4>Phone format example</h4>\n      <ExpandableTextarea\n        placeholder='Phone number'\n        className={'fixed-height'}\n        initialValue={state}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={phoneFormat}\n        name='phoneFormat'\n      />\n\n      <h4>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useState } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\n\nexport default function PhoneFormat() {\n  const [state, setState] = useState('')\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'phoneFormat':\n        setState(value)\n      default:\n        return\n    }\n  }\n\n  const phoneFormat = maskFormating({\n    maskString: '(!!) !!!! !!!!',\n    replaceChar: '!',\n    validChar: /\\d/g,\n    preVisibleMask: false,\n    rightToLeft: false\n  })\n\n  return (\n    <div className='container'>\n      <h4>Credit card format example</h4>\n      <ExpandableTextarea\n        placeholder='Type here'\n        initialValue={state}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={phoneFormat}\n        name='phoneFormat'\n      />\n    </div>\n  )\n}\n`}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport ExpandableTextarea, { passwordFormating } from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function PasswordFormat() {\n  const [state, setState] = useState('')\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'passwordFormat':\n        setState(value)\n      default:\n        return\n    }\n  }\n\n  const passwordFormat = passwordFormating(/[^\\-]/, '-')\n\n  return (\n    <div className='container'>\n      <h4>Password format example</h4>\n      <ExpandableTextarea\n        className={'fixed-height'}\n        placeholder='Password'\n        initialValue={state}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={passwordFormat}\n        name='passwordFormat'\n      />\n\n      <h4>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useState } from 'react'\nimport ExpandableTextarea, { passwordFormating } from 'expandable-textarea'\n\nexport default function PasswordFormat() {\n  const [state, setState] = useState('')\n  function handleSubmit({ name, value, differFromInitial }) {\n    if (!differFromInitial) return\n    switch (name) {\n      case 'passwordFormat':\n        setState(value)\n      default:\n        return\n    }\n  }\n\n  const passwordFormat = passwordFormating(/[^\\-]/, '-')\n\n  return (\n    <div className='container'>\n      <h4>Password format example</h4>\n      <ExpandableTextarea\n        placeholder='Type here'\n        initialValue={state}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={passwordFormat}\n        name='passwordFormat'\n      />\n    </div>\n  )\n}\n`}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n","export function passwordFormating(\n  allowedCharsRegEx = /[^\\*]/g,\n  makingChar = '*'\n) {\n  return (changeData) => {\n    let {\n      pressedKey,\n      newSelectionStart,\n      newSelectionEnd,\n      newValue,\n      valid,\n      unformatedValue,\n      iniSelectionStart,\n      iniSelectionEnd\n    } = changeData\n    if (!valid) return { ...changeData }\n    let changes, newUnformatedValue\n    if (unformatedValue === undefined) {\n      newUnformatedValue = newValue\n      changes = ''\n      newSelectionStart = newValue.length\n      newSelectionEnd = newValue.length\n    } else {\n      newUnformatedValue = unformatedValue\n      changes = (newValue.match(allowedCharsRegEx) || ['']).join('')\n    }\n    let deleteVal = 0\n    let backspaceVal = 0\n    const notSelected = iniSelectionStart === iniSelectionEnd\n    if (pressedKey === 'Delete' && notSelected) {\n      deleteVal = 1\n    }\n    if (pressedKey === 'Backspace' && notSelected) {\n      backspaceVal = 1\n    }\n    newUnformatedValue =\n      newUnformatedValue.slice(0, iniSelectionStart - backspaceVal) +\n      changes +\n      newUnformatedValue.slice(iniSelectionEnd + deleteVal)\n    return {\n      ...changeData,\n      unformatedValue: newUnformatedValue,\n      newValue: newUnformatedValue.replace(/./g, makingChar),\n      newSelectionStart,\n      newSelectionEnd\n    }\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport styles from './mockup-server.module.css'\nimport useDelayedFunction from 'use-delayed-function'\n\nexport default function MockupServer({ serverState }) {\n  const pRef = useRef()\n  const hRef = useRef()\n\n  const [addStyleNow] = useDelayedFunction(addStyle)\n  const [changeStyleLater] = useDelayedFunction(changeStyle, 1200)\n  const [removeStyleLater] = useDelayedFunction(removeStyle, 800)\n\n  function addStyle() {\n    pRef.current.className = styles['updating']\n    hRef.current.innerHTML = 'Updating...'\n  }\n\n  function changeStyle() {\n    pRef.current.className = styles['just-updated']\n    hRef.current.innerHTML = 'Done'\n\n    pRef.current.innerHTML = serverState\n  }\n\n  function removeStyle() {\n    hRef.current.innerHTML = 'Mockup server'\n\n    pRef.current.className = ''\n  }\n\n  useEffect(() => {\n    addStyleNow().then(changeStyleLater).then(removeStyleLater)\n  }, [serverState])\n  return (\n    <div className={styles['mockup-server']}>\n      <h5 ref={hRef}>Mockup server</h5>\n      <div className='page-divider'></div>\n      <p ref={pRef}></p>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Nav from './components/nav/nav'\nimport ExpandShrink from './components/expand-shrink/expand-shrink'\nimport InputLikeField from './components/input-like-field/input-like-field'\nimport CreditCardFormat from './components/credit-card-format/credit-card-format'\nimport PhoneFormat from './components/phone-format/phone-format'\nimport PasswordFormat from './components/password-format/password-format'\nimport MockupServer from './components/mockup-server/mockup-server'\n\nfunction App() {\n  const [state, setState] = useState('')\n  return (\n    <BrowserRouter>\n      <div className='top-panel'>\n        <Nav />\n        <MockupServer serverState={state} />\n      </div>\n      <Switch>\n        <Route exact path='/' component={Nav} />\n        <Route\n          path='/expand-shrink'\n          render={() => (\n            <ExpandShrink serverState={state} updateServer={setState} />\n          )}\n        />\n        <Route path='/input-like-field' component={InputLikeField} />\n        <Route path='/credit-card-format' component={CreditCardFormat} />\n        <Route path='/phone-format' component={PhoneFormat} />\n        <Route path='/password-format' component={PasswordFormat} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n\n// import ExpandableTextarea, {\n//   passwordFormating,\n//   maskFormating\n// } from 'expandable-textarea'\n\n// const pp = () => {\n//   const [state, setState] = useState('')\n//   const [iniValue, setIniValue] = useState('0123456789')\n//   const [render, forceRender] = useState(false)\n\n//   const passwordFormat = passwordFormating(/[^\\-]/, '-')\n//   const creditCardFormat = maskFormating({\n//     maskString: '!!!!-!!!!-!!!!-!!!!',\n//     replaceChar: '!',\n//     validChar: /\\d/g,\n//     preVisibleMask: true,\n//     rightToLeft: false\n//   })\n//   const phoneFormat = maskFormating({\n//     maskString: '(!!) !!!! !!!!',\n//     replaceChar: '!',\n//     validChar: /\\d/g,\n//     preVisibleMask: false,\n//     rightToLeft: false\n//   })\n\n//   const customFormat = (changeData) => {\n//     // it format typed number in parentheses\n//     // by calling makFormating dynamically\n//     const { newValue, valid } = changeData\n//     if (!valid) return { ...changeData }\n//     const newUnformatedValue = (newValue.match(/\\d/g) || ['']).join('')\n//     const maskString = '(' + ''.padEnd(newUnformatedValue.length, '!') + ')'\n//     const newChangeData = maskFormating({\n//       maskString,\n//       validChar: /\\d/g\n//     })(changeData)\n//     return { ...newChangeData, unformatedValue: newUnformatedValue }\n//   }\n\n//   // const parentRef = useRef()\n//   // useEffect(() => {\n//   //   parentRef.current.value = 'hello'\n//   // }, [])\n\n//   function handleChange(e) {\n//     setIniValue(e.target.value)\n//   }\n\n//   function limitedLenght(changeData) {\n//     const { newValue, valid } = changeData\n//     return { ...changeData, valid: newValue.length < 10 && valid }\n//   }\n\n//   function acceptNumbers(changeData) {\n//     const { pressedKey } = changeData\n//     if (!'0123456789'.includes(pressedKey)) {\n//       return { ...changeData, valid: false }\n//     }\n//     return { ...changeData }\n//   }\n\n//   return (\n//     <div>\n//       <h3>Example</h3>\n//       <ExpandableTextarea\n//         className='my-text'\n//         placeholder='Start development'\n//         submitValue={setState}\n//         rows={1}\n//         // cols={4}\n//         totalLines={1}\n//         name='testField'\n//         // minRows={2}\n//         // maxRows={5}\n//         // wrap='off'\n//         initialValue={iniValue}\n//         formatFunction={customFormat}\n//         // ref={parentRef}\n//         beforeElement={<p>Hello</p>}\n//         afterElement={<h1>Bye</h1>}\n//       />\n\n//       <textarea\n//         className='ordinary-text'\n//         placeholder='ordinary textarea'\n//         value={iniValue}\n//         onChange={handleChange}\n//         rows={3}\n//         cols={9}\n//         wrap='on'\n//       ></textarea>\n//       <h1\n//         onClick={() => {\n//           forceRender(!render)\n//         }}\n//       >\n//         Render\n//       </h1>\n//       <h3>Last update:{state.testField}</h3>\n//       <h3>Has changed:{state.differFromInitial ? 'Yes' : 'No'}</h3>\n//     </div>\n//   )\n// }\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}