{"version":3,"sources":["components/mockup-server/mockup-server.module.css","components/nav/nav.module.css","components/address-icon/address-icon.module.css","components/focus-by-icon/focus-by-icon.module.css","components/nav/nav.js","../../src/format-functions/mask-formating.js","../../src/index.js","components/expand-shrink/expand-shrink.js","components/input-like-field/input-like-field.js","components/credit-card-format/credit-card-format.js","components/phone-format/phone-format.js","components/password-format/password-format.js","../../src/format-functions/password-formating.js","components/mockup-server/mockup-server.js","components/footer/footer.js","components/address-icon/address-icon.js","components/focus-by-icon/focus-by-icon.js","components/custom-format/custom-format.js","App.js","index.js"],"names":["module","exports","Nav","pathname","useLocation","active","styles","className","to","maskFormating","para","maskString","replaceChar","validChar","preVisibleMask","rightToLeft","changeData","maskStr","valid","unformated","newValue","Array","newSelectionStart","alreadyValid","i","len","Math","pressedKey","unformatedValue","totalReplace","unformatedPos","formated","valIndex","cursorPos","firstReplaceHappened","thisChar","mustReplace","valChar","restValue","moveCursor","newSelectionEnd","forwardRef","initialValue","resizeDebouncingDelay","fitInField","rest","textAreaRef","useRef","cloneRef","pRef","undefined","lineHeight","useState","value","lineCount","minRows","useDelayedFunction","cloningStyles","name","iniLineCount","getLineCount","getCursorState","cursorStart","cursorEnd","scrollTop","newScrollLeft","scrollLeft","increasing","iniValue","newLineCount","excessIsShrinking","totalLines","formatFunction","setState","getComputedStyle","style","parseInt","elem","iniScrollLeft","e","key","useEffect","styleObserver","MutationObserver","attributes","attributeFilter","cloneStyles","window","forwardedRef","state","handleKeyDown","prepareChangeData","applyFormat","onClick","beforeElement","rows","maxRows","validRows","submitingValue","submitValue","differFromInitial","ref","position","paddingTop","paddingBottom","border","resize","visibility","disabled","cols","wrap","afterElement","ExpandShrink","serverState","updateServer","textareaRef","current","focus","placeholder","result","language","thisStyle","showLineNumbers","InputLikeField","CreditCardFormat","creditCardFormat","PhoneFormat","phoneFormat","PasswordFormat","passwordFormat","allowedCharsRegEx","makingChar","iniSelectionEnd","newUnformatedValue","changes","deleteVal","backspaceVal","notSelected","iniSelectionStart","passwordFormating","SyntaxHighlighter","registerLanguage","jsx","MockupServer","hRef","innerHTML","addStyleNow","changeStyleLater","removeStyleLater","then","Footer","href","AddressIcon","width","height","viewBox","fill","xmlns","d","FocusByIcon","CustomFormat","match","join","newChangeData","padEnd","length","App","setServerState","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f37885d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mockup-server\":\"mockup-server_mockup-server__2UAgk\",\"updating\":\"mockup-server_updating__DUwPm\",\"just-updated\":\"mockup-server_just-updated__1X6Mn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__3AJrQ\",\"active\":\"nav_active__XI2iC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"address-icon\":\"address-icon_address-icon__2IXdp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"address\":\"focus-by-icon_address__1SbJE\"};","import React from 'react'\nimport styles from './nav.module.css'\nimport { Link, useLocation } from 'react-router-dom'\n\nexport default function Nav() {\n  const { pathname } = useLocation()\n  const active = styles['active']\n  return (\n    <div className={styles['nav']}>\n      <h3>Expandable-textarea Examples</h3>\n      <div>\n        <Link\n          className={pathname === '/expand-shrink' ? active : ''}\n          to='/expand-shrink'\n        >\n          Expand-shrink\n        </Link>\n        <Link\n          className={pathname === '/input-like-field' ? active : ''}\n          to='/input-like-field'\n        >\n          Input-like-field\n        </Link>\n        <Link\n          className={pathname === '/focus-by-icon' ? active : ''}\n          to='/focus-by-icon'\n        >\n          Focus-by-icon\n        </Link>\n        <Link\n          className={pathname === '/credit-card-format' ? active : ''}\n          to='/credit-card-format'\n        >\n          Credit-card-format\n        </Link>\n        <Link\n          className={pathname === '/password-format' ? active : ''}\n          to='/password-format'\n        >\n          Password-format\n        </Link>\n        <Link\n          className={pathname === '/phone-format' ? active : ''}\n          to='/phone-format'\n        >\n          Phone-format\n        </Link>\n        <Link\n          className={pathname === '/custom-format' ? active : ''}\n          to='/custom-format'\n        >\n          Custom-format\n        </Link>\n      </div>\n    </div>\n  )\n}\n","export function maskFormating(para = {}) {\n  const {\n    maskString = '!!!!-!!!!-!!!!-!!!!',\n    replaceChar = '!',\n    validChar = /\\d/g,\n    preVisibleMask = true,\n    rightToLeft = false\n  } = para\n\n  return (changeData) => {\n    let maskStr = maskString\n    let { pressedKey, newSelectionStart, newValue, valid } = changeData\n    if (!valid) return { ...changeData }\n    let unformated = (newValue.match(validChar) || ['']).join('')\n    if (rightToLeft) {\n      maskStr = Array.from(maskStr).reverse().join('')\n      newValue = Array.from(newValue).reverse().join('')\n      newSelectionStart = newValue.length - newSelectionStart\n      newSelectionStart = newSelectionStart < 0 ? 0 : newSelectionStart\n    }\n\n    let alreadyValid = true\n\n    for (\n      let i = 0,\n        len = preVisibleMask\n          ? Math.max(maskStr.length, newValue.length)\n          : newValue.length;\n      i < len;\n      ++i\n    ) {\n      if (i >= maskStr.length || i >= newValue.length) {\n        alreadyValid = false\n        break\n      }\n      if (maskStr[i] === replaceChar && !newValue[i].match(validChar)) {\n        alreadyValid = false\n        break\n      }\n      if (maskStr[i] !== replaceChar && newValue[i] !== maskStr[i]) {\n        alreadyValid = false\n        break\n      }\n    }\n    if (alreadyValid && pressedKey !== 'Delete' && pressedKey !== 'Backspace') {\n      return { ...changeData, unformatedValue: unformated }\n    }\n    if (rightToLeft) {\n      unformated = (newValue.match(validChar) || ['']).join('')\n    }\n    const totalReplace = maskStr.split(replaceChar).length - 1\n\n    const unformatedPos = Math.min(\n      (newValue.slice(0, newSelectionStart).match(validChar) || []).length,\n      totalReplace\n    )\n    let formated = ''\n    let valIndex = 0\n    let cursorPos = 0\n    let firstReplaceHappened = false\n    for (let i = 0, len = maskStr.length; i < len; ++i) {\n      let thisChar = maskStr[i]\n      let mustReplace = thisChar === replaceChar\n      let valChar = valIndex < unformated.length ? unformated[valIndex] : ''\n      if (mustReplace) {\n        firstReplaceHappened = true\n      }\n      if (valIndex < unformatedPos || !firstReplaceHappened) {\n        ++cursorPos\n      }\n      if (mustReplace) {\n        formated += valChar\n        ++valIndex\n      } else {\n        if (valChar) {\n          formated += thisChar\n        }\n      }\n\n      if (!valChar && preVisibleMask) {\n        if (mustReplace) {\n          formated += ' '\n        } else {\n          formated += thisChar\n        }\n      }\n\n      if (!valChar && !preVisibleMask) {\n        break\n      }\n    }\n\n    if (\n      formated[cursorPos] &&\n      !formated[cursorPos].match(validChar) &&\n      pressedKey === 'Delete'\n    ) {\n      let restValue = formated.substring(cursorPos)\n      if (restValue.match(validChar)) {\n        let moveCursor = maskStr.substring(cursorPos).indexOf(replaceChar)\n        cursorPos += moveCursor >= 0 ? moveCursor : 0\n      }\n    }\n\n    if (rightToLeft) {\n      formated = Array.from(formated).reverse().join('')\n      unformated = Array.from(unformated).reverse().join('')\n      cursorPos = formated.length - cursorPos\n      cursorPos = cursorPos < 0 ? 0 : cursorPos\n    }\n    unformated = (formated.match(validChar) || ['']).join('')\n    return {\n      ...changeData,\n      unformatedValue: unformated,\n      newValue: formated,\n      newSelectionStart: cursorPos,\n      newSelectionEnd: cursorPos\n    }\n  }\n}\n","import React, { useState, useEffect, useRef, forwardRef } from 'react'\nimport useDelayedFunction from 'use-delayed-function'\nexport * from './format-functions/password-formating'\nexport * from './format-functions/mask-formating'\n\nconst ExpandableTextarea = forwardRef(function (\n  {\n    beforeElement,\n    afterElement,\n    className,\n    submitValue, // ({name:newValue}, hasChanged) , name:\"inputName\"\n    initialValue = '',\n    totalLines, // if not defined textarea lines not limited\n    minRows, // min row\n    maxRows, // max row\n    rows, // if set will be fixed rows\n    formatFunction,\n    resizeDebouncingDelay = 300,\n    fitInField = false,\n    ...rest // additional standard textarea attributes like: disabled, wrap,...\n  },\n  forwardedRef\n) {\n  const textAreaRef = useRef()\n  const cloneRef = useRef()\n  const pRef = useRef()\n  const changeData = useRef({ unformatedValue: undefined })\n  const lineHeight = useRef()\n  const [state, setState] = useState({\n    value: '',\n    lineCount: minRows || 1\n  })\n  const [cloneStylesLater] = useDelayedFunction(\n    cloneStyles,\n    resizeDebouncingDelay\n  )\n  const cloningStyles = [\n    'width',\n    'border',\n    'fontFamily',\n    'fontSize',\n    'fontWeight',\n    'fontVariant',\n    'fontStretch',\n    'boxSizing',\n    'paddingLeft',\n    'paddingRight'\n  ]\n\n  const { name } = rest\n  if (!submitValue) {\n    rest.disabled = true\n  }\n\n  if (!rest.wrap) {\n    rest.wrap = totalLines == 1 ? 'off' : 'on'\n  }\n\n  useEffect(() => {\n    const styleObserver = new MutationObserver(cloneStyles)\n    styleObserver.observe(textAreaRef.current, {\n      attributes: true,\n      attributeFilter: ['style']\n    })\n    cloneStyles()\n    return () => {\n      styleObserver.disconnect()\n    }\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('resize', cloneStylesLater)\n    return () => {\n      window.removeEventListener('resize', cloneStylesLater)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (changeData.current) {\n      const elem = textAreaRef.current\n      const {\n        newSelectionStart,\n        newSelectionEnd,\n        newScrollTop,\n        newScrollLeft,\n        iniSelectionStart,\n        iniSelectionEnd,\n        iniScrollTop,\n        iniScrollLeft\n      } = changeData.current\n      if (changeData.current.valid) {\n        elem.selectionStart = newSelectionStart\n        elem.selectionEnd = newSelectionEnd\n        elem.scrollTop = newScrollTop\n        elem.scrollLeft = newScrollLeft\n      } else {\n        elem.selectionStart = iniSelectionStart\n        elem.selectionEnd = iniSelectionEnd\n        elem.scrollTop = iniScrollTop\n        elem.scrollLeft = iniScrollLeft\n      }\n    }\n  }, [state])\n\n  useEffect(() => {\n    if (forwardedRef) {\n      forwardedRef.current = textAreaRef.current\n    }\n  }, [])\n\n  useEffect(() => {\n    const iniValue = state.value\n    handleKeyDown({ key: '' })\n    textAreaRef.current.value = initialValue\n    prepareChangeData(iniValue, initialValue)\n    changeData.current.valid = true\n    changeData.current.unformatedValue = undefined\n    applyFormat()\n  }, [initialValue])\n\n  function handleChange(e) {\n    prepareChangeData(state.value, e.target.value)\n    const { newLineCount, excessIsShrinking } = changeData.current\n    if (totalLines && newLineCount > totalLines && !excessIsShrinking) {\n      changeData.current.valid = false\n    } else {\n      changeData.current.valid = true\n    }\n    applyFormat()\n  }\n\n  function prepareChangeData(iniValue, newValue) {\n    const iniLineCount = getLineCount(iniValue)\n    const {\n      cursorStart: newSelectionStart,\n      cursorEnd: newSelectionEnd,\n      scrollTop: newScrollTop,\n      scrollLeft: newScrollLeft\n    } = getCursorState(textAreaRef.current)\n    const increasing = newValue.length > iniValue.length\n    const newLineCount = getLineCount(newValue)\n    const excessIsShrinking =\n      totalLines && iniLineCount > totalLines && !increasing\n    changeData.current = {\n      ...changeData.current,\n      iniValue,\n      iniLineCount,\n      newValue,\n      newLineCount,\n      excessIsShrinking,\n      increasing,\n      newSelectionStart,\n      newSelectionEnd,\n      newScrollTop,\n      newScrollLeft\n    }\n  }\n\n  function applyFormat() {\n    if (formatFunction) {\n      changeData.current = formatFunction(changeData.current)\n    }\n    const {\n      valid,\n      iniValue,\n      newValue,\n      iniLineCount,\n      newLineCount\n    } = changeData.current\n    if (valid) {\n      setState({ value: newValue, lineCount: newLineCount })\n    } else {\n      setState({ value: iniValue, lineCount: iniLineCount })\n    }\n  }\n\n  function getLineHeight() {\n    lineHeight.current = parseInt(getComputedStyle(pRef.current).height, 10)\n  }\n\n  function getLineCount(value) {\n    cloneRef.current.value = value\n    return Math.floor(cloneRef.current.scrollHeight / lineHeight.current)\n  }\n\n  function submitChange() {\n    if (typeof name === 'string') {\n      const { unformatedValue } = changeData.current\n      let submitingValue = state.value\n      if (unformatedValue !== undefined) {\n        submitingValue = unformatedValue\n      }\n      submitValue({\n        [name]: submitingValue,\n        differFromInitial: initialValue !== submitingValue,\n        name,\n        unformatedValue: unformatedValue,\n        value: state.value\n      })\n    }\n  }\n\n  function cloneStyles() {\n    for (let style of cloningStyles) {\n      cloneRef.current.style[style] = getComputedStyle(textAreaRef.current)[\n        style\n      ]\n      if (style !== 'border') {\n        pRef.current.style[style] = getComputedStyle(textAreaRef.current)[style]\n      }\n    }\n    getLineHeight()\n    cloneRef.current.style['height'] = `${lineHeight.current}px`\n  }\n\n  function getCursorState(elem) {\n    return {\n      cursorStart: elem.selectionStart,\n      cursorEnd: elem.selectionEnd,\n\n      scrollTop: elem.scrollTop,\n      scrollLeft: elem.scrollLeft\n    }\n  }\n\n  function handleKeyDown(e) {\n    const {\n      cursorStart: iniSelectionStart,\n      cursorEnd: iniSelectionEnd,\n      scrollTop: iniScrollTop,\n      scrollLeft: iniScrollLeft\n    } = getCursorState(textAreaRef.current)\n    changeData.current = {\n      ...changeData.current,\n      iniSelectionStart,\n      iniSelectionEnd,\n      iniScrollTop,\n      iniScrollLeft,\n      pressedKey: e.key\n    }\n  }\n\n  function focusOnText(e) {\n    if (e.target !== textAreaRef.current) {\n      textAreaRef.current.focus()\n    }\n  }\n\n  function validRows() {\n    if (rows) return rows\n    const { lineCount } = state\n    if (maxRows && lineCount > maxRows) return maxRows\n    if (minRows && lineCount < minRows) return minRows\n    return lineCount\n  }\n\n  return (\n    <div onClick={focusOnText} className={className}>\n      {beforeElement ? beforeElement : null}\n      <textarea\n        ref={textAreaRef}\n        {...rest}\n        rows={validRows()}\n        value={state.value}\n        onChange={handleChange}\n        onBlur={submitChange}\n        onKeyDown={handleKeyDown}\n      />\n      <textarea\n        ref={cloneRef}\n        style={{\n          position: 'absolute',\n          paddingTop: '0px',\n          paddingBottom: '0px',\n          border: '0px solid #000000',\n          resize: 'none',\n          visibility: 'hidden'\n        }}\n        disabled={true}\n        rows={1}\n        cols={rest.cols}\n        wrap={totalLines == 1 ? (fitInField == true ? 'on' : 'off') : rest.wrap}\n      ></textarea>\n      <p\n        ref={pRef}\n        style={{\n          position: 'absolute',\n          paddingTop: '0px',\n          paddingBottom: '0px',\n          border: '0px solid #000000',\n          visibility: 'hidden'\n        }}\n      >\n        1\n      </p>\n      {afterElement ? afterElement : null}\n    </div>\n  )\n})\n\nexport default ExpandableTextarea\n","import React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function ExpandShrink({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'expandShrink':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Expand-shrink example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        placeholder='Type here'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        totalLines={5}\n        name='expandShrink'\n        minRows={1}\n        maxRows={5}\n      />\n      <h4>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea from 'expandable-textarea'\n\nexport default function ExpandShrink({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'expandShrink':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Expand-shrink example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        placeholder='Type here'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        totalLines={5}\n        name='expandShrink'\n        minRows={1}\n        maxRows={5}\n      />\n    </div>\n  )\n}\n\n      `}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function InputLikeField({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'inputLikeField':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Input-like-field example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        className={'fixed-height'}\n        placeholder='Type here'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        name='inputLikeField'\n      />\n      <h4 className='code-title'>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea from 'expandable-textarea'\n\nexport default function InputLikeField({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'inputLikeField':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Input-like-field example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        className={'fixed-height'}\n        placeholder='Type here'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        name='inputLikeField'\n      />\n    </div>\n  )\n}\n\n      `}\n      </SyntaxHighlighter>\n      <h4 className='code-title'>CSS</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='css'\n        style={thisStyle}\n        showLineNumbers='true'\n      >{`\n/* CSS */\n\n.fixed-height > textarea {\n  height: 2rem;\n}\n\n      `}</SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function CreditCardFormat({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'creditCardFormat':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n  const creditCardFormat = maskFormating({\n    maskString: '!!!!-!!!!-!!!!-!!!!',\n    replaceChar: '!',\n    validChar: /\\d/g,\n    preVisibleMask: true,\n    rightToLeft: false\n  })\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Credit card format example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        className={'fixed-height'}\n        placeholder='Credit card number'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={creditCardFormat}\n        name='creditCardFormat'\n      />\n\n      <h4 className='code-title'>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\n\nexport default function CreditCardFormat({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'creditCardFormat':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n  const creditCardFormat = maskFormating({\n    maskString: '!!!!-!!!!-!!!!-!!!!',\n    replaceChar: '!',\n    validChar: /\\d/g,\n    preVisibleMask: true,\n    rightToLeft: false\n  })\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Credit card format example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        className={'fixed-height'}\n        placeholder='Credit card number'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={creditCardFormat}\n        name='creditCardFormat'\n      />\n    </div>\n  )\n}\n\n`}\n      </SyntaxHighlighter>\n      <h4 className='code-title'>CSS</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='css'\n        style={thisStyle}\n        showLineNumbers='true'\n      >{`\n/* CSS */\n\n.fixed-height > textarea {\n  height: 2rem;\n}\n\n      `}</SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function PhoneFormat({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'phoneFormat':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n\n  const phoneFormat = maskFormating({\n    maskString: '(!!) !!!! !!!!',\n    replaceChar: '!',\n    validChar: /\\d/g,\n    preVisibleMask: false,\n    rightToLeft: false\n  })\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Phone format example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        placeholder='Phone number'\n        className={'fixed-height'}\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={phoneFormat}\n        name='phoneFormat'\n      />\n\n      <h4 className='code-title'>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\n\nexport default function PhoneFormat({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'phoneFormat':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n\n  const phoneFormat = maskFormating({\n    maskString: '(!!) !!!! !!!!',\n    replaceChar: '!',\n    validChar: /\\d/g,\n    preVisibleMask: false,\n    rightToLeft: false\n  })\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Phone format example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        placeholder='Phone number'\n        className={'fixed-height'}\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={phoneFormat}\n        name='phoneFormat'\n      />\n    </div>\n  )\n}\n\n`}\n      </SyntaxHighlighter>\n      <h4 className='code-title'>CSS</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='css'\n        style={thisStyle}\n        showLineNumbers='true'\n      >{`\n/* CSS */\n\n.fixed-height > textarea {\n  height: 2rem;\n}\n\n      `}</SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea, { passwordFormating } from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function PasswordFormat({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'passwordFormat':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n\n  const passwordFormat = passwordFormating(/[^-]/, '-')\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Password format example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        className={'fixed-height'}\n        placeholder='Password'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={passwordFormat}\n        name='passwordFormat'\n      />\n\n      <h4 className='code-title'>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea, { passwordFormating } from 'expandable-textarea'\n\nexport default function PasswordFormat({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'passwordFormat':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n\n  const passwordFormat = passwordFormating(/[^-]/, '-')\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Password format example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        className={'fixed-height'}\n        placeholder='Password'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={passwordFormat}\n        name='passwordFormat'\n      />\n    </div>\n  )\n}\n\n`}\n      </SyntaxHighlighter>\n      <h4 className='code-title'>CSS</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='css'\n        style={thisStyle}\n        showLineNumbers='true'\n      >{`\n/* CSS */\n\n.fixed-height > textarea {\n  height: 2rem;\n}\n\n      `}</SyntaxHighlighter>\n    </div>\n  )\n}\n","export function passwordFormating(\n  allowedCharsRegEx = /[^\\*]/g,\n  makingChar = '*'\n) {\n  return (changeData) => {\n    let {\n      pressedKey,\n      newSelectionStart,\n      newSelectionEnd,\n      newValue,\n      valid,\n      unformatedValue,\n      iniSelectionStart,\n      iniSelectionEnd\n    } = changeData\n    if (!valid) return { ...changeData }\n    let changes, newUnformatedValue\n    if (unformatedValue === undefined) {\n      newUnformatedValue = newValue\n      changes = ''\n      newSelectionStart = newValue.length\n      newSelectionEnd = newValue.length\n    } else {\n      newUnformatedValue = unformatedValue\n      changes = (newValue.match(allowedCharsRegEx) || ['']).join('')\n    }\n    let deleteVal = 0\n    let backspaceVal = 0\n    const notSelected = iniSelectionStart === iniSelectionEnd\n    if (pressedKey === 'Delete' && notSelected) {\n      deleteVal = 1\n    }\n    if (pressedKey === 'Backspace' && notSelected) {\n      backspaceVal = 1\n    }\n    newUnformatedValue =\n      newUnformatedValue.slice(0, iniSelectionStart - backspaceVal) +\n      changes +\n      newUnformatedValue.slice(iniSelectionEnd + deleteVal)\n    return {\n      ...changeData,\n      unformatedValue: newUnformatedValue,\n      newValue: newUnformatedValue.replace(/./g, makingChar),\n      newSelectionStart,\n      newSelectionEnd\n    }\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport styles from './mockup-server.module.css'\nimport useDelayedFunction from 'use-delayed-function'\n\nexport default function MockupServer({ serverState, setState }) {\n  const pRef = useRef()\n  const hRef = useRef()\n\n  const [addStyleNow] = useDelayedFunction(addStyle)\n  const [changeStyleLater] = useDelayedFunction(changeStyle, 1200)\n  const [removeStyleLater] = useDelayedFunction(removeStyle, 800)\n\n  function addStyle() {\n    pRef.current.className = styles['updating']\n    hRef.current.innerHTML = 'Updating...'\n  }\n\n  function changeStyle() {\n    pRef.current.className = styles['just-updated']\n    hRef.current.innerHTML = 'Done'\n    pRef.current.innerHTML = serverState\n    setState(serverState)\n  }\n\n  function removeStyle() {\n    hRef.current.innerHTML = 'Mockup server'\n    pRef.current.className = ''\n  }\n\n  useEffect(() => {\n    addStyleNow().then(changeStyleLater).then(removeStyleLater)\n  }, [serverState])\n\n  return (\n    <div className={styles['mockup-server']}>\n      <h5 ref={hRef}>Mockup server</h5>\n      <div className='page-divider'></div>\n      <p ref={pRef}></p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Footer() {\n  return (\n    <div className='links'>\n      <a href='https://github.com/makannew/expandable-textarea'>Github</a>\n      <a href='https://www.npmjs.com/package/expandable-textarea'>\n        npm package\n      </a>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './address-icon.module.css'\n\nexport default function AddressIcon() {\n  return (\n    <svg\n      className={styles['address-icon']}\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path d='M12 2C8.13 2 5 5.13 5 9C5 14.25 12 22 12 22C12 22 19 14.25 19 9C19 5.13 15.87 2 12 2ZM12 11.5C10.62 11.5 9.5 10.38 9.5 9C9.5 7.62 10.62 6.5 12 6.5C13.38 6.5 14.5 7.62 14.5 9C14.5 10.38 13.38 11.5 12 11.5Z' />\n    </svg>\n  )\n}\n","import React from 'react'\nimport ExpandableTextarea from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport AddressIcon from '../address-icon/address-icon'\nimport styles from './focus-by-icon.module.css'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function FocusByIcon({ serverState, updateServer }) {\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'focusByIcon':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n  return (\n    <div className='container'>\n      <h4>Focus-by-icon example</h4>\n\n      <ExpandableTextarea\n        className={styles['address']}\n        beforeElement={<AddressIcon />}\n        placeholder='Address'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        totalLines={3}\n        name='focusByIcon'\n        minRows={2}\n        maxRows={3}\n      />\n      <h4>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React from 'react'\nimport ExpandableTextarea from 'expandable-textarea'\nimport AddressIcon from '../address-icon/address-icon'\nimport styles from './focus-by-icon.module.css'\n\nexport default function FocusByIcon({ serverState, updateServer }) {\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'focusByIcon':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n  return (\n    <div className='container'>\n      <h4>Focus-by-icon example</h4>\n\n      <ExpandableTextarea\n        className={styles['address']}\n        beforeElement={<AddressIcon />}\n        placeholder='Address'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        totalLines={3}\n        name='focusByIcon'\n        minRows={2}\n        maxRows={3}\n      />\n    </div>\n  )\n}\n\n      `}\n      </SyntaxHighlighter>\n      <h4 className='code-title'>CSS</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='css'\n        style={thisStyle}\n        showLineNumbers='true'\n      >{`\n/* CSS */\n\n.address {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n      `}</SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx'\nimport { prism as thisStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nSyntaxHighlighter.registerLanguage('jsx', jsx)\n\nexport default function CustomFormat({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'customFormat':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n\n  const customFormat = (changeData) => {\n    const { newValue, valid } = changeData\n    if (!valid) return { ...changeData }\n    const newUnformatedValue = (newValue.match(/\\d/g) || ['']).join('')\n    const maskString = '(' + ''.padEnd(newUnformatedValue.length, '!') + ')'\n    const newChangeData = maskFormating({\n      maskString,\n      validChar: /\\d/g\n    })(changeData)\n    return { ...newChangeData, unformatedValue: newUnformatedValue }\n  }\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Custom-format example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        className={'fixed-height'}\n        placeholder='Type numbers'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={customFormat}\n        name='customFormat'\n      />\n      <h4 className='code-title'>Code</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='jsx'\n        style={thisStyle}\n        showLineNumbers='true'\n      >\n        {`\nimport React, { useRef, useEffect } from 'react'\nimport ExpandableTextarea, { maskFormating } from 'expandable-textarea'\n\nexport default function CustomFormat({ serverState, updateServer }) {\n  const textareaRef = useRef()\n\n  function handleSubmit(result) {\n    const { name, differFromInitial } = result\n    if (!differFromInitial) return\n    switch (name) {\n      case 'customFormat':\n        updateServer(result[name])\n        break\n      default:\n        return\n    }\n  }\n\n  const customFormat = (changeData) => {\n    const { newValue, valid } = changeData\n    if (!valid) return { ...changeData }\n    const newUnformatedValue = (newValue.match(/\\d/g) || ['']).join('')\n    const maskString = '(' + ''.padEnd(newUnformatedValue.length, '!') + ')'\n    const newChangeData = maskFormating({\n      maskString,\n      validChar: /\\d/g\n    })(changeData)\n    return { ...newChangeData, unformatedValue: newUnformatedValue }\n  }\n\n  useEffect(() => {\n    textareaRef.current.focus()\n  }, [])\n\n  return (\n    <div className='container'>\n      <h4>Custom-format example</h4>\n      <ExpandableTextarea\n        ref={textareaRef}\n        placeholder='Type numbers'\n        initialValue={serverState}\n        submitValue={handleSubmit}\n        rows={1}\n        totalLines={1}\n        formatFunction={customFormat}\n        name='customFormat'\n      />\n    </div>\n  )\n}\n\n      `}\n      </SyntaxHighlighter>\n      <h4 className='code-title'>CSS</h4>\n      <SyntaxHighlighter\n        className='code-style'\n        language='css'\n        style={thisStyle}\n        showLineNumbers='true'\n      >{`\n/* CSS */\n\n.fixed-height > textarea {\n  height: 2rem;\n}\n\n      `}</SyntaxHighlighter>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport Nav from './components/nav/nav'\nimport ExpandShrink from './components/expand-shrink/expand-shrink'\nimport InputLikeField from './components/input-like-field/input-like-field'\nimport CreditCardFormat from './components/credit-card-format/credit-card-format'\nimport PhoneFormat from './components/phone-format/phone-format'\nimport PasswordFormat from './components/password-format/password-format'\nimport MockupServer from './components/mockup-server/mockup-server'\nimport Footer from './components/footer/footer'\nimport FocusByIcon from './components/focus-by-icon/focus-by-icon'\nimport CustomFormat from './components/custom-format/custom-format'\n\nfunction App() {\n  const [state, setState] = useState('')\n  const [serverState, setServerState] = useState('')\n  return (\n    <HashRouter>\n      <div className='top-panel'>\n        <Nav />\n        <MockupServer serverState={serverState} setState={setState} />\n      </div>\n      <div className='examples'>\n        <Switch>\n          <Route\n            exact\n            path='/'\n            render={() => (\n              <ExpandShrink serverState={state} updateServer={setServerState} />\n            )}\n          />\n          <Route\n            path='/expand-shrink'\n            render={() => (\n              <ExpandShrink serverState={state} updateServer={setServerState} />\n            )}\n          />\n          <Route\n            path='/input-like-field'\n            render={() => (\n              <InputLikeField\n                serverState={state}\n                updateServer={setServerState}\n              />\n            )}\n          />\n          <Route\n            path='/credit-card-format'\n            render={() => (\n              <CreditCardFormat\n                serverState={state}\n                updateServer={setServerState}\n              />\n            )}\n          />\n          <Route\n            path='/phone-format'\n            render={() => (\n              <PhoneFormat serverState={state} updateServer={setServerState} />\n            )}\n          />\n          <Route\n            path='/password-format'\n            render={() => (\n              <PasswordFormat\n                serverState={state}\n                updateServer={setServerState}\n              />\n            )}\n          />\n          <Route\n            path='/focus-by-icon'\n            render={() => (\n              <FocusByIcon serverState={state} updateServer={setServerState} />\n            )}\n          />\n          <Route\n            path='/custom-format'\n            render={() => (\n              <CustomFormat serverState={state} updateServer={setServerState} />\n            )}\n          />\n        </Switch>\n        <Footer />\n      </div>\n    </HashRouter>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}